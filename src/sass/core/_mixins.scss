//
// MIXINS
//

//
// Media query mixin
// Pass it a size (tiny, small, medium, large, huge)
// And scope ('~' [1], '+' [2], '-' [3])
// No need for mq with (tiny, '+') - it includes everything!
@mixin mq($size, $scope:'~') {

  // Max size is one pixel (1/16em) under $size
  $max: map-get($width, $size) - 0.0625em;
  $min: 0;

  // Min size is next size down
  @if $size == tiny {
    $min: 0;
  } @else if $size == small {
    $min: map-get($width, tiny);
  } @else if $size == medium {
    $min: map-get($width, small);
  } @else if $size == large {
    $min: map-get($width, medium);
  } @else if $size == huge {
    $min: map-get($width, large);
  }

  @if $scope == '~' {
    // [1] This size only
    @media only screen and (min-width: $min) and (max-width: $max) {
      @content;
    }
  } @else if $scope == '+' {
    // [2] This size and bigger
    @media only screen and (min-width: $min) {
      @content;
    }
  } @else if $scope == '-' {
    // [3] This size and smaller
    @media only screen and (max-width: $max) {
      @content;
    }
  }

}

// Inline link layout (utility links etc.)
@mixin inline-links() {
  list-style:none;
  margin-top:0;
  margin-bottom:0;
  padding:0;
  li {
    float:left;
  }
}

//
// Demarginalise:
// Remove top margin from first child and last margin from bottom child
// Use on padded components
@mixin demarginalise() {
  > :first-child {
    margin-top:0;
  }
  > :last-child {
    margin-bottom:0;
  }
}

//
//Clearfix
//
@mixin clearfix() {
  &:before,
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}

//
// Generate a font-size and baseline-compatible line-height.
//
@mixin font-size($font-size: $base-font-size, $line-height: auto) {

  font-size: $font-size;
  font-size: ($font-size / $base-font-size) * 1rem;

  @if $line-height == auto {
    line-height: ceil($font-size / $base-line-height) * ($base-line-height / $font-size);
  } @else {
    @if (type-of($line-height) == number or $line-height == inherit or $line-height == normal) {
      line-height: $line-height;
    } @elseif ($line-height != none and $line-height != false) {
      @warn "D’oh! ‘#{$line-height}’ is not a valid value for `line-height`."
    }
  }
}








//
// Default transition
// You can pass a comma-separated list of properties here if you like
//
@mixin transition($property:'all') {
  transition-property: #{$property};
  transition-duration: 0.2s;
  transition-timing-function: ease-out;
}



//
// Get color from color map
//
@function color($color, $tone: 'base') {
    @return map-get(map-get($colors, $color), $tone);
}

//
// rem fallback mixin
// Converts rems to pixels (assumes 16px font-size)
//
@mixin rem($property, $values...) {

  $pxValues: '';
  $remValues: '';
  $base-font-size:16px;

  @each $value in $values {
    $pxValue: $value;
    $remValue: $value;
    @if $value * 0 != 0% and $value != 0 {
      $value: strip-unit($value);
      $pxValue: $value*$base-font-size;
      $remValue: #{$value}rem;
    }
    $pxValues: #{$pxValues + $pxValue + " "};
    $remValues: #{$remValues + $remValue + " "};
  }

  #{$property}: $pxValues;
  #{$property}: $remValues;
}

@function strip-unit($num) {
  @return $num/($num * 0 + 1);
}
