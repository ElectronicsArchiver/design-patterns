//
// MIXINS
//

//
// Demarginalise:
// Remove top margin from first child and last margin from bottom child
// Use on padded components
@mixin demarginalise() {
  :first-child {
    margin-top:0;
  }
  :last-child {
    margin-bottom:0;
  }
}

//
//Clearfix
//
@mixin clearfix() {
  &:before,
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}


//
// Default transition
// You can pass a comma-separated list of properties here if you like
//
@mixin transition($property:'all') {
  transition-property: #{$property};
  transition-duration: 0.2s;
  transition-timing-function: ease-out;
}

@mixin submenu($color:$blue) {
  // This loop sets the section colors for the sub menus.
  // It's built in so we can tweak the colors/contrast
  @for $n from 3 through $nav_deepest_level {
    // Max darken level is 95%
    $darkenVal: min(95, ($n - 1) * 6);
    $thisColor: darken($color, $darkenVal);
    $thisHover: darken($thisColor, 3);
    // Level #{$n}
    .menu-lv#{$n} {
      background-color:$thisColor;
      // To overlay the lighter background
      &:after {
        background-color:$thisColor;
      }
      > li {
        > a {
          background-color:$thisColor;
          &:after {
            border-left-color: $thisColor;
          }
          &:hover {
            background-color:$thisHover;
            &:after {
              border-left-color:$thisHover;
            }
          }
        }
      }
    }
    .megamenu .menu-lv#{$n} ul,
    .megamenu .menu-lv#{$n} ul a {
      background-color: transparent;
    }
  }
}






//
// Get color from color map
//
@function color($color, $tone: 'base') {
    @return map-get(map-get($colors, $color), $tone);
}

//
// rem fallback mixin
// Converts rems to pixels (assumes 16px font-size)
//
@mixin rem($property, $values...) {

  $pxValues: '';
  $remValues: '';
  $font-size:16px;

  @each $value in $values {
    $pxValue: $value;
    $remValue: $value;
    @if $value * 0 != 0% and $value != 0 {
      $value: strip-unit($value);
      $pxValue: $value*$font-size;
      $remValue: #{$value}rem;
    }
    $pxValues: #{$pxValues + $pxValue + " "};
    $remValues: #{$remValues + $remValue + " "};
  }

  #{$property}: $pxValues;
  #{$property}: $remValues;
}

@function strip-unit($num) {
  @return $num/($num * 0 + 1);
}
