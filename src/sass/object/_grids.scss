//
// GRID SYSTEM
//
$box-padding: $base-spacing;
@mixin extend-rows() {
  &:before,
  &:after {
    display:block;
    content:'';
    width:100%;
    height:100%;
    position:absolute;
    top:0;
  }
  &:before {
    right:100%;
  }
  &:after {
    left:100%;
  }
}
.o-grid {

}

.o-grid__row {
  @include clearfix;
  font-size:0;
  position:relative;
  margin-left:-$box-padding;
}

.o-grid__row--image {
  background-position:50% 50%;
  background-size:cover;
  background-repeat:no-repeat;
  .o-wrapper:not(.o-wrapper--wide) & {
    // Shift bg-image over to line up with padded row (not in wide)
    background-position:calc(50% + #{$base-spacing}) 50%;
  }
}
.o-grid__row--alt1,
.o-grid__row--alt2,
.o-grid__row--alt3 {
  @include extend-rows;
  // Coloured rows need to have padding so components don't butt up against the top
  padding-top:$box-padding;
  // Rows following coloured rows should also be padded at the top to separate the content...
  + .o-grid__row {
    padding-top:$box-padding;
  }
}
// ...unless they are the same type.
.o-grid__row--alt1 + .o-grid__row--alt1,
.o-grid__row--alt2 + .o-grid__row--alt2,
.o-grid__row--alt3 + .o-grid__row--alt3 {
  padding-top:0;
}
.o-grid__row--alt1 {
  color:$o-grid__row--alt1-color;
  hr {
    background-color:$o-grid__row--alt1-hr-color;
    color:$o-grid__row--alt1-hr-color;
  }
  a {
    color:$o-grid__row--alt1-link-color;
    &:hover {
      color:$o-grid__row--alt1-link-hover-color;
    }
  }
}
.o-grid__row--alt2 {
  color:$o-grid__row--alt2-color;
  hr {
    background-color:$o-grid__row--alt2-hr-color;
    color:$o-grid__row--alt2-hr-color;
  }
  a {
    color:$o-grid__row--alt2-link-color;
    &:hover {
      color:$o-grid__row--alt2-link-hover-color;
    }
  }
}
.o-grid__row--bordered {
  @include extend-rows;
  border-bottom:10px solid $o-grid__row-border-color;
  &:before,
  &:after {
    border-bottom:10px solid $o-grid__row-border-color;
  }
}
.o-grid__row--alt1 {
  background-color:$o-grid__row--alt1-background-color;
  &:before,
  &:after {
    background-color:$o-grid__row--alt1-background-color;
  }
  &.o-grid__row--bordered {
    border-bottom-color:$o-grid__row--alt1-border-color;
    &:before,
    &:after {
      border-bottom-color:$o-grid__row--alt1-border-color;
    }
  }
}
.o-grid__row--alt2 {
  background-color:$o-grid__row--alt2-background-color;
  &:before,
  &:after {
    background-color:$o-grid__row--alt2-background-color;
  }
  &.o-grid__row--bordered {
    border-bottom-color:$o-grid__row--alt2-border-color;
    &:before,
    &:after {
      border-bottom-color:$o-grid__row--alt2-border-color;
    }
  }
}
.o-grid__row--alt3 {
  background-color:$o-grid__row--alt3-background-color;
  &:before,
  &:after {
    background-color:$o-grid__row--alt3-background-color;
  }
  &.o-grid__row--bordered {
    border-bottom-color:$o-grid__row--alt2-border-color;
    &:before,
    &:after {
      border-bottom-color:$o-grid__row--alt2-border-color;
    }
  }
}

.o-grid__box {
  @include responsive-font-size($default-font-sizes);
  // @include font-size;
  display:inline-block;
  vertical-align:top;
  padding-left:$box-padding;
}

.o-grid__box--full {
  width:100%;
}
.o-grid__box--half {
  width:50%;
  @include mq(medium, '-') {
    width:100%;
  }
}
.o-grid__box--third {
  width:33.333%;
  @include mq(small, '-') {
    width:100%;
  }
}
.o-grid__box--twothirds {
  width:66.666%;
  @include mq(small, '-') {
    width:100%;
  }
}
.o-grid__box--quarter {
  width:25%;
  @include mq(medium) {
    width:50%;
  }
  @include mq(small, '-') {
    width:100%;
  }
}
.o-grid__box--threequarters {
  width:75%;
  @include mq(medium, '-') {
    width:100%;
  }
}

@include mq(medium) {
  // Stops stepped display of q+h+q
  .o-grid__box--quarter + .o-grid__box--half {
    float: left;
    // Remove float if default size is overridden by an @-class
    &.o-grid__box--twothirds\@medium,
    &.o-grid__box--half\@medium,
    &.o-grid__box--third\@medium,
    &.o-grid__box--quarter\@medium {
      float:none;
    }
  }
  // Stops the above fix also affecting q+q+h
  .o-grid__box--quarter + .o-grid__box--quarter + .o-grid__box--half {
    float: none;
  }
  // Fixes tq+q
  .o-grid__box--threequarters + .o-grid__box--quarter {
    width:100%;
  }
  // Wow I can't believe I'm doing it this way
  // If quarter-size first child is also 2nd to last child then it must be q+tq
  .o-grid__box--quarter:first-child:nth-last-child(2) {
    width:100%;
  }
}

//
// @ classes allow you to override the default response on specific screen sizes
// e.g. .o-grid__box--third@small will go to 33.333% width on small screens and lower
// (even if it would normally go to 100% width)
//
$htdiw: mapReverse($width);
@each $size, $measurement in $htdiw {

  @include mq(#{$size}) {
    // Two classes to override specificity of usual grid boxes
    .o-grid__box {
      &.o-grid__box--full\@#{$size} {
        width:100%;
      }
      &.o-grid__box--half\@#{$size} {
        width:50%;
      }
      &.o-grid__box--third\@#{$size} {
        width:33.333%;
      }
      &.o-grid__box--twothirds\@#{$size} {
        width:66.666%;
      }
      &.o-grid__box--quarter\@#{$size} {
        width:25%;
      }
      &.o-grid__box--threequarters\@#{$size} {
        width:75%;
      }

    }
  }
}
